/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-03-24 07:31:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class mafia_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\t\r\n");
      out.write("<!DOCTYPE html>\t\r\n");
      out.write("<html>\t\r\n");
      out.write("<head><title>Web Socket Example</title></head>\r\n");
String str = request.getParameter("nickname"); 
      out.write("\r\n");
      out.write("<body>\t\r\n");
      out.write("  <form>\t\r\n");
      out.write("    <!-- 유저 명을 입력하는 텍스트 박스(기본 값은 anonymous(익명)) -->\t\r\n");
      out.write("\t<p id=\"user\">닉네임 : ");
      out.print(str );
      out.write("</p>\r\n");
      out.write("    <!-- 송신 메시지를 작성하는 텍스트 박스 -->\t\r\n");
      out.write("    <label>텍스트\r\n");
      out.write("    \t<input id=\"textMessage\" type=\"text\">\t\r\n");
      out.write("    </label><br>\r\n");
      out.write("    <!-- 메세지를 송신하는 버튼 -->\t\r\n");
      out.write("    <input onclick=\"sendMessage()\" value=\"Send\" type=\"button\">\t\r\n");
      out.write("    <!-- WebSocket 접속 종료하는 버튼 -->\t\r\n");
      out.write("    <input onclick=\"disconnect()\" value=\"Disconnect\" type=\"button\">\t\r\n");
      out.write("  </form>\t\r\n");
      out.write("  <br />\t\r\n");
      out.write("  <!-- 콘솔 메시지의 역할을 하는 로그 텍스트 에리어.(수신 메시지도 표시한다.) -->\t\r\n");
      out.write("  <textarea id=\"messageTextArea\" rows=\"10\" cols=\"50\"></textarea>\t\r\n");
      out.write("  <script type=\"text/javascript\">\t\r\n");
      out.write("  document.querySelector(\"#user\").value = '");
      out.print(str);
      out.write("'\r\n");
      out.write("    // 「WebSocketEx」는 프로젝트 명\t\r\n");
      out.write("    // 「broadsocket」는 호스트 명\t\r\n");
      out.write("    // WebSocket 오브젝트 생성 (자동으로 접속 시작한다. - onopen 함수 호출)\t\r\n");
      out.write("    var webSocket = new WebSocket(\"ws://localhost:8081/websocket_exam/mafia_socket\");\t\r\n");
      out.write("    // 콘솔 텍스트 에리어 오브젝트\t\r\n");
      out.write("    //var messageTextArea = document.getElementById(\"messageTextArea\");//옛 할당법\r\n");
      out.write("    var messageTextArea = document.querySelector(\"#messageTextArea\");\r\n");
      out.write("    // WebSocket 서버와 접속이 되면 호출되는 함수\t\r\n");
      out.write("    webSocket.onopen = function(message) {\t\r\n");
      out.write("      // 콘솔 텍스트에 메시지를 출력한다.\t\r\n");
      out.write("      messageTextArea.value += \"Server connect...!\\n\";\t\r\n");
      out.write("    };\t\r\n");
      out.write("    // WebSocket 서버와 접속이 끊기면 호출되는 함수\t\r\n");
      out.write("    webSocket.onclose = function(message) {\t\r\n");
      out.write("      // 콘솔 텍스트에 메시지를 출력한다.\t\r\n");
      out.write("      messageTextArea.value += \"Server Disconnect...!\\n\";\t\r\n");
      out.write("    };\t\r\n");
      out.write("    // WebSocket 서버와 통신 중에 에러가 발생하면 요청되는 함수\t\r\n");
      out.write("    webSocket.onerror = function(message) {\t\r\n");
      out.write("      // 콘솔 텍스트에 메시지를 출력한다.\t\r\n");
      out.write("      messageTextArea.value += \"error...\\n\";\t\r\n");
      out.write("    };\t\r\n");
      out.write("    /// WebSocket 서버로 부터 메시지가 오면 호출되는 함수\t\r\n");
      out.write("    webSocket.onmessage = function(evnet) {\t\r\n");
      out.write("      // 콘솔 텍스트에 메시지를 출력한다.\r\n");
      out.write("     if(0<=event.data || event.data<=4){\r\n");
      out.write("      \tmessageTextArea.value += \"0은 시민, 1은 경찰, 2는 시민\";\t    \t      \t \r\n");
      out.write("     }\r\n");
      out.write("      \tmessageTextArea.value += event.data + \"\\n\";\t    \t  \r\n");
      out.write("      \r\n");
      out.write("    };\t\r\n");
      out.write("    // Send 버튼을 누르면 호출되는 함수\t\r\n");
      out.write("    function sendMessage() {\t\r\n");
      out.write("      // 유저명 텍스트 박스 오브젝트를 취득\t\r\n");
      out.write("      var user = document.getElementById(\"user\");\t\r\n");
      out.write("      // 송신 메시지를 작성하는 텍스트 박스 오브젝트를 취득\t\r\n");
      out.write("      var message = document.getElementById(\"textMessage\");\r\n");
      out.write("      //공백\r\n");
      out.write("      if(user.value.trim()==\"\"||message.value.trim()==\"\"){\r\n");
      out.write("    \t  return\r\n");
      out.write("      }\r\n");
      out.write("      // 콘솔 텍스트에 메시지를 출력한다.\t\r\n");
      out.write("      messageTextArea.value += user.value + \"(me) => \" + message.value + \"\\n\";\t\r\n");
      out.write("      // WebSocket 서버에 메시지를 전송(형식 「{{유저명}}메시지」)\t\r\n");
      out.write("      webSocket.send(\"{{\" + user.value + \"}}\" + message.value);\t\r\n");
      out.write("      // 송신 메시지를 작성한 텍스트 박스를 초기화한다.\t\r\n");
      out.write("      message.value = \"\";\t\r\n");
      out.write("    }\t\r\n");
      out.write("    // Disconnect 버튼을 누르면 호출되는 함수\t\r\n");
      out.write("    function disconnect() {\t\r\n");
      out.write("      // WebSocket 접속 해제\r\n");
      out.write("      var user = document.getElementById(\"user\");\t\r\n");
      out.write("      webSocket.send(\"{{\" + user.value + \"}}\" + \"나가기\");\t\r\n");
      out.write("      webSocket.close();\t\r\n");
      out.write("    }\t\r\n");
      out.write("  </script>\t\r\n");
      out.write("</body>\t\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
