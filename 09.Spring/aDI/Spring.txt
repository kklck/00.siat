- Spring
	- 1. DI (dependency injection : 의존성 주입)
		- 역행제어의 종류
		- Spring Bean 생성 후 <bean>태그로 빈 파일 이름 지정
	- 2. AOP (aspect oriented programming : 관점 지향 프로그램)
		- 함수 호출과는 반대.
		- Namespace에서 aop 설정
		- 기존(핵심기능) 소스에 추가(횡단관심사)할 때 기존 소스를 유지하면서 동작할 수 있도록 (Before, around(proceed), after)
	STS(eclipse + spring) 설치
		- .3버전 : Sping 프로젝트 생성
			- https://download.springsource.com/release/STS/3.9.16.RELEASE/dist/e4.19/spring-tool-suite-3.9.16.RELEASE-e4.19.0-win32-x86_64.zip
		- .4버전 : SpringBoot만 생성
	프레임워크?
	vs 디자인 패턴
		- 가이드 라인, 코드 제공 X
		but, 패턴이 적용된 클래스 라이브러리 코드 제공
	vs 클래스 라이브러리
		- 코드가 제어 담당. 클래스에서 직접 호출 하여 사용
		but, 프레임워크가 제어 담당, 프레임워크에서 클래스 호출

- Maven : 라이브러리 관리
	- 버전 충돌 시 유저\m2 폴더 아래 repository 삭제
	- 프로젝트 에러 시 Maven > Update Project

* workspace에서 상단 체크박스 두 개 체크, UTF-8 세팅

- DI 3가지 방법?

- xml : Namespace에서 p 설정, p:속성명 으로 쉽게 가능. bean-ref : xml내 객체 이름 설정 가능
	
- annotation : Namespace에서 context 설정, 패키지 스캔하여 스프링이 전처리 => <context:component-scan base-package="패키지명"/>
	- @Component(Bean이름) : 해당 클래스 Bean 취급, 메모리에 올리기
		- getBean("클래스명") : 클래스 만들 때 맨 앞은 대문자(MemberDAO), getBean 할 때는 소문자(memberDAO)로 구분하자!
	- @Autowired : 생성자나 setter가 없어도 스프링이 값을 주입
	- @Qualifier(Bean이름) : @Autowired 한 객체를 지정하고자
	- @Resource(name=Bean이름) : 스프링이 아닌 자바의 Annotation이나, 같이 쓰이니까 구분하지 말자. Autowired + Qualifier
	- @Service(Bean이름) : 서비스 역할을 하는 Component
	- @Repository(Bean이름) : 모델 역할을 하는 Component
	- @Aspect : AOP Weaving을 위해 advice클래스에 지정.
	- @[Before|Around|After]("execution(~)") : 위빙할 메소드에 포인트컷 지정.
	
- 상위 인터페이스 생성하는 이유?
	- 확장성을 염두. 구조를 정의해야 편한 코딩 가능
	
- 클래스에서 인터페이스 : Alt + Shift + t -> 메뉴선택(internal?)

- AOP 관계
	- target : 핵심기능 갖고있는 모듈, 부가기능 추가할 것.
	- advice : 횡단관심사 구현, 처리
	- JoinPoint : 횡단관심사 실행 지점
	- pointCut : advice의 메소드를 선별, 정규표현식
	- Aspect : 횡단관심사 그자체.
	- Weaving : target의 Joinpoint에 point
	- <aop:aspectj-autoproxy/> : AOP 자동 설정, @로 지정한 것만 취급
	
===========================
Java Project 생성
Configure - Maven
Spring - Add
pom.xml - dependency