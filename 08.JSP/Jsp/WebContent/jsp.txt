- JSP 파일 상단 <%@ ~ %> 은 html 과 구분하기 위함
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
    - page 설정하는 설정부 태그(언어는 자바, 형식은 html, 문자셋과 인코딩 지정)

@JSP 기초 문법
    - <%@ ~ %> : 설정부(Directive) 태그
        - Page, Include, Taglib
    - <%! ~ %> : 선언부(Declaration) 태그
        - 전역 변수, 함수 선언
        - 사용 빈도 적음
    - <%  ~ %> : 코드부(Scriptlet) 태그
        - 자바 코드 사용
        - 선언부 태그를 자주 사용하지 않는 이유
    - <%= ~ %> : 표현부(Expression) 태그
        - 출력 값

- Servlet
    - 요청과 응답을 한꺼번에 해줄테니 알아서 동작해라

- web.xml
    - <welcome-file>파일명.확장자</welcome-file>
        - 확장자 없어도 지정 가능

<servlet>
    <servlet-name>HelloServlet</servlet-name>
    <servlet-class>temp.HelloServlet</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>HelloServlet</servlet-name>
    <url-pattern>/HelloServlet</url-pattern>
</servlet-mapping>

같은 <servlet-name> 가진 코드 간 <url-pattern>에 있는 파일을 <servlet-class>에 연동
<url-pattern>의 수는 무한
*class 파일은 VM이 보는 파일

- JSP 와 Servlet(Java) 차이
    - JSP
        - html 기반에 값을 받고 동작, tomcat이 out.write 하여 코드 자동 출력(서블릿화)
    - Servlet
        - Java에서 요청과 응답을 한꺼번에 동작하고, out.println 하여 코드 별도 출력
    => 둘 다 합치자

- html과 JSP 차이
    - html
        - html, css, js 파일을 모두 Client로 보내 실행
    - JSP
        - java 파일로 변환해 서버 동작을 하고 class 파일로 복사해 서버에서 실행
        - Client에는 결과만 출력

- JSP에서 주석 처리 되는 확장자
    - <!-- html -->
    - <%-- JSP --%> => Java로 변환 시 제외
    - <%
        //JAVA  
        /*코드*/ => Class로 변환 시 제외
      %>

- 드라이버 인식 작업 종류
    - C:\Program Files\Java\jdk1.8.0_261\jre\lib\ext 에 오라클.jar 복사
    - 빌드패스 라이브러리 설정
    - WEB-INF>lib 에 복사+

- thin : 자바용 DB 연결 방식 이름

- JDK : 편집용
- JRE : 실행용

- JSP-DB 연동
    - 1. 드라이버 로딩
	    Class.forName("oracle.jdbc.driver.OracleDriver");
	- 2. 연결객체 얻어오기
	    Connection con = DriverManager.getConnection("jdbc:oracle:thin:@192.168.10.94:1521:xe", "SCOTT", "TIGER");
	- 3. sql 문장 만들기
	    String sql = "SELECT * FROM EMP";
	- 4. 전송 객체 얻어오기
	    PreparedStatement ps = con.prepareStatement(sql);
	- 5. 전송
	    ResultSet rs = ps.executeQuery(); 

- 전송 객체 종류
    - Statement : 완전한 문장, execute에 실제 쿼리문 선언
        - ps = con.Statement();
        - ps.executeQuery(sql);
    - PreparedStatement : 불완전한 문장, 후에 추가, Statement 상속, 객체 선언할 때 쿼리문 선언
        - ps = con.PreparedStatement(sql);
        - ps.executeQuery();
    - CallStatement : plsql의 function()/procedure() 호출

- 전송 방법
    - ReesultSet executeQuery() : SELECT
        - 출력 값이 table
    - int executeUpdate() : INSERT, UPDATE, DELETE
        - 출력 값이 int, 동작 수행 알림 뿐(1행 수정)

- 요즘은 getInt 잘 안씀 숫자여도 getString

- 시퀀스 자동 증가문
    - CREATE SEQUENCE 시퀀스명
      INCREMENT BY 증가치
      START WITH 시작;
    - SELECT 시퀸스명.NEXTVAL FROM DUAL;
        - 더미테이블 DUAL을 임시로 사용
    - sql문 values에 넣어 primary key의 중복을 피할 수 있다.


- JDBC 단점
	- 모든 메소드마다 연결 작업(1~6) 필요
	- select에서 요소 값을 가져올 때 각각 get(String|Int) 작업을 해야 함.
	- 해결하고자 MyBatis 사용
	
- MyBatis
	- Java와 sql(xml)을 구분하여 관계형 프로그래밍을 쉽게 하도록 하는 프레임 워크
	- ?-config.xml
		- 	<?xml version="1.0" encoding="UTF-8" ?>
			<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"> 
			<configuration>
			<properties resource='db.properties'/><!-- 리소스 안에 있는 변수 사용하라. -->
				<environments default="development">
					<environment id="development">
						<transactionManager type="JDBC"/><!-- JDBC : autoCommit-->
						<dataSource type="POOLED"><!-- 미리 모든 연결 객체를 Connection Pool에 모아 연결 -->
							<property name="driver" value="${driver}"/>
							<property name="url" value="${url}"/>
							<property name="username" value="${username}"/>
							<property name="password" value="${password}"/>
						</dataSource>
					</environment>
				</environments>
				<mappers>
					<mapper resource="mybatis/guest/mapper/CommentMapper.xml"/>
				</mappers>
			</configuration>
			
	- 생성자 쓰지 말 것
			
	- db.properties
		- 연결에 필요한 드라이버, url, id, password를 설정하여 쉽게 편집 가능
		
	- #{prepared 일때}, ${그냥 State}
	
	- mapper.xml
		- 해당 파일은 꺽쇄를 태그로 인지하기 때문에 CDATA로 구분
		- <![CDATA[ sql문 ]]>
	
- 프레임 워크	
	- 일련의 라이브러리 갖고 프로젝트 기반(틀)을 만들어 주는 것.
	
- JPA
	- DTO와 DB를 유연히 연동
	
- DTO = VO

- 조인은 HashMap 리턴

- EL
	- 파라미터 : ${param.이름}
	- 세션 : ${sessionScope.이름}
	- 쿠키 : ${cookie.이름.value}
	- <%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core"%>
		- set(var, value), if(test), choose(c:when, c:otherwise) 
	- 연산자
		-eq, ne(!=), lt(<), gt(>), le(<=), ge
	
- JSTL
	- jstl.jar, standard.jar

- MVC