/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-07 06:15:09 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._6_005fajax_005fclass._01_005fjs_005fajax_005fbasic;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _01_005fajax_005fget_005fcsv_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD Xhtml 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("\t<title></title>\r\n");
      out.write("\t<script>\r\n");
      out.write("\t\tvar xmlHttp;\r\n");
      out.write("\t\twindow.onload=function(){\r\n");
      out.write("\t\t\t// 1. 브라우저에 따른 XMLHttpRequest생성하기.\r\n");
      out.write("\t\t\txmlHttp = new XMLHttpRequest();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 2. 요청에 대한 응답처리 이벤트 리스너 등록.\r\n");
      out.write("\t\t\txmlHttp.onreadystatechange=on_ReadyStateChange;\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// 3.서버로 보낼 데이터 생성.\r\n");
      out.write("\t\t\t// 3.데이터 생성.\r\n");
      out.write("\t\t\tvar data = \"cate=book&name=kim\";\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t//###########################################################\r\n");
      out.write("\t\t\t// 4. GET방식으로 데이터 보내기, 응답은 비동기로 클라이언트<->서버간의 연결 요청준비.\r\n");
      out.write("\t\t\txmlHttp.open(\"GET\", \"01_server.jsp?\"+data, true);\t\t\t\r\n");
      out.write("\t\t\t// 5. 실제 데이터 전송.\r\n");
      out.write("\t\t\txmlHttp.send(null);\r\n");
      out.write("\t\t\t//####\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// T. 동기/비동기 실행 테스트를 위한 부분.\r\n");
      out.write("\t\t\talert(\"전송 시작!\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t// 6.응답처리.\r\n");
      out.write("\t\tfunction on_ReadyStateChange(){\r\n");
      out.write("\t\t\t// 4=데이터 전송 완료.(0=초기화전,1=로딩중,2=로딩됨,3=대화상태)\r\n");
      out.write("\t\t\tif(xmlHttp.readyState==4){\r\n");
      out.write("\t\t\t\t//200은 에러 없음.(404=페이지가 존재하지 않음)\r\n");
      out.write("\t\t\t\tif(xmlHttp.status==200){\r\n");
      out.write("\t\t\t\t\t// 서버에서 받은 값.\r\n");
      out.write("\t\t\t\t\talert(\"서버에서 받은 원본 데이터 : \"+xmlHttp.responseText);\r\n");
      out.write("\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t//7. 데이터 파싱처리.\r\n");
      out.write("\t\t\t\t\tparseData(xmlHttp.responseText);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\telse{\r\n");
      out.write("\t\t\t\t\talert(\"처리 중 에러가 발생했습니다.\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t//##################################################\r\n");
      out.write("\t\t//7. CSV포맷  데이터 처리.\r\n");
      out.write("\t\tfunction parseData(strText){\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t// alert( strText );\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar aryData = strText.split(\"|\");\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\tfor(var i=0;i<aryData.length;i++){\r\n");
      out.write("\t\t\t\tvar param  = aryData[i].split(\"=\");\t\t\t\t\r\n");
      out.write("\t\t\t\tif( param[0].trim() == 'cate'){  // 공백제거를 하지 않으면 처음에 공백에 들어와서 cate를 찾지 못함\r\n");
      out.write("\t\t\t\t\t document.getElementById(\"cate\").value = param[1];\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif( param[0].trim() == 'name'){\r\n");
      out.write("\t\t\t\t\tdocument.getElementById(\"name\").value = param[1];\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\t</script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("서버로부터 넘겨받은 데이터<br/>\r\n");
      out.write("첫번째 데이터 : <input type=\"text\" name=\"\" id=\"cate\"/><br/>\r\n");
      out.write("두번째 데이터 : <input type=\"text\" name=\"\" id=\"name\"/><br/>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
